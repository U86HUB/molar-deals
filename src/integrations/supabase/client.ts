
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables if available, otherwise fall back to hardcoded values
// IMPORTANT: These are your public keys, so it's okay to include them in client-side code
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://fyyfrlhcvtxddonnkeoy.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ5eWZybGhjdnR4ZGRvbm5rZW95Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU4NjU5ODMsImV4cCI6MjA2MTQ0MTk4M30.SOZTo0frLpPY3L0wN2ljV8Axqryct1nkh4CUpotGZz4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Check Supabase URL validity
const isValidUrl = (url: string): boolean => {
  try {
    new URL(url);
    return true;
  } catch (e) {
    console.error("Invalid Supabase URL:", url);
    return false;
  }
};

// Validate URL before proceeding
if (!isValidUrl(SUPABASE_URL)) {
  console.error("Supabase URL is invalid. Please check your configuration.");
}

// Log the URL and key (first few characters) to help with debugging
console.log("Supabase URL:", SUPABASE_URL);
console.log("Supabase key available:", SUPABASE_PUBLISHABLE_KEY ? "Yes (starts with: " + SUPABASE_PUBLISHABLE_KEY.substring(0, 5) + "...)" : "No");

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    debug: import.meta.env.DEV, // Only enable debug in development
  },
  global: {
    headers: {
      'X-Client-Info': 'DentalDeals Web App',
    },
  },
});

// Enhanced diagnostic helpers
export const checkSupabaseConnection = async () => {
  try {
    console.log('Testing Supabase connection...');
    
    // First try to get the auth configuration, which doesn't need auth
    const { data: authData, error: authError } = await supabase.auth.getSession();
    console.log('Auth check result:', authError ? 'Failed' : 'Success');
    
    if (authError) {
      console.error('Auth check error:', authError);
      return { 
        success: false, 
        auth: false, 
        db: false, 
        error: authError
      };
    }
    
    // Then try a database check with better error handling
    console.log('Testing database connection...');
    try {
      const { data, error } = await supabase.from('profiles').select('id').limit(1);
      
      if (error) {
        console.error('Database check failed:', error);
        // Don't throw here, just report the error
        return { 
          success: true, // Auth succeeded at least
          auth: true,
          db: false, 
          error: error
        };
      }
      
      console.log('Supabase connection test successful');
      return { success: true, auth: true, db: true };
    } catch (dbError) {
      console.error('Database check exception:', dbError);
      return { 
        success: true, // Auth succeeded at least
        auth: true,
        db: false, 
        error: dbError
      };
    }
  } catch (error) {
    console.error('Supabase connection test failed:', error);
    return { success: false, error };
  }
};

// Add a utility to check browser cache status
export const clearBrowserCache = async () => {
  try {
    if ('caches' in window) {
      console.log('Clearing browser caches for Supabase domain...');
      const cacheKeys = await window.caches.keys();
      const supabaseCaches = cacheKeys.filter(key => 
        key.includes('supabase') || key.includes(SUPABASE_URL));
      
      await Promise.all(
        supabaseCaches.map(key => window.caches.delete(key))
      );
      return true;
    }
  } catch (error) {
    console.error('Failed to clear caches:', error);
  }
  return false;
};

// Utility to diagnose network connectivity
export const diagnoseBrowserNetwork = () => {
  const diagnostics = {
    online: navigator.onLine,
    connectionType: (navigator as any).connection 
      ? (navigator as any).connection.effectiveType 
      : 'unknown',
    connectionRtt: (navigator as any).connection 
      ? (navigator as any).connection.rtt 
      : 'unknown',
    serviceWorker: 'serviceWorker' in navigator,
    https: window.location.protocol === 'https:',
    userAgent: navigator.userAgent
  };
  
  console.log('Browser network diagnostics:', diagnostics);
  return diagnostics;
};

// Check explicitly if Supabase auth is configured
export const isSupabaseAuthConfigured = (): boolean => {
  return (
    isValidUrl(SUPABASE_URL) && 
    SUPABASE_PUBLISHABLE_KEY !== null && 
    SUPABASE_PUBLISHABLE_KEY !== undefined &&
    SUPABASE_PUBLISHABLE_KEY.length > 20
  );
};
