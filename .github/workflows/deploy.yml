
name: Deploy

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      # Set up PostGIS in its own schema with proper security
      - name: Configure PostGIS Security
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          echo "Configuring PostGIS security..."
          # Install PostgreSQL client
          sudo apt-get update && sudo apt-get install -y postgresql-client
          
          # Execute SQL commands to move PostGIS to extensions schema
          psql "$SUPABASE_DB_URL" << 'EOSQL'
          -- Create extensions schema if it doesn't exist
          CREATE SCHEMA IF NOT EXISTS extensions;
          
          -- Check if PostGIS is in public schema
          DO $$
          BEGIN
            IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'spatial_ref_sys') THEN
              -- Drop and recreate PostGIS in the extensions schema
              DROP EXTENSION IF EXISTS postgis CASCADE;
              CREATE EXTENSION postgis WITH SCHEMA extensions;
              
              -- Set search path to include extensions
              ALTER DATABASE postgres SET search_path = public, extensions;
              
              RAISE NOTICE 'PostGIS moved to extensions schema successfully';
            ELSE
              RAISE NOTICE 'PostGIS is not in public schema or already configured correctly';
            END IF;
          END;
          $$ LANGUAGE plpgsql;
          
          -- Verify configuration
          SELECT schema_name, extension_name 
          FROM information_schema.schemata s
          JOIN pg_extension e ON s.schema_name = e.extnamespace::regnamespace::text
          WHERE extension_name = 'postgis';
          EOSQL
          
      # This is a placeholder for your actual deployment steps
      - name: Deploy
        run: |
          echo "Deployment would happen here"
          # Example for Netlify deployment:
          # npx netlify-cli deploy --prod
          
          # Example for Vercel deployment:
          # npx vercel --prod

